// Modified by SignalFx
plugins {
  id "com.github.johnrengelman.shadow" version "4.0.4"
}

// Set properties before any plugins get loaded
project.ext {
  // Execute tests on all JVMs, even rare and outdated ones
  integrationTests = true
}

description = 'dd-java-agent'

apply from: "${rootDir}/gradle/java.gradle"
apply from: "${rootDir}/gradle/publish.gradle"

/*
 * Include subproject's shadowJar in the dd-java-agent jar.
 * Note jarname must end in .zip, or its classes will be on the classpath of
 * the dd-java-agent jar.
 */

def includeShadowJar(subproject, jarname) {
  def agent_project = project
  subproject.afterEvaluate {
    agent_project.processResources {
      from(subproject.tasks.shadowJar)
      rename {
        it.equals(subproject.shadowJar.archivePath.getName()) ?
          jarname :
          it
      }
    }
    agent_project.processResources.dependsOn subproject.tasks.shadowJar
    subproject.shadowJar {
      classifier null

      mergeServiceFiles()

      exclude '**/module-info.class'

      dependencies {
        exclude(dependency("org.projectlombok:lombok:$versions.lombok"))
      }

      // Prevents conflict with other SLF4J instances. Important for premain.
      relocate 'org.slf4j', 'datadog.slf4j'
      // rewrite dependencies calling Logger.getLogger
      relocate 'java.util.logging.Logger', 'datadog.trace.bootstrap.PatchLogger'

      if (!project.hasProperty("disableShadowRelocate") || !disableShadowRelocate) {
        // shadow OT impl to prevent casts to implementation
        relocate 'datadog.trace.common', 'datadog.trace.agent.common'
        relocate 'datadog.opentracing', 'datadog.trace.agent.ot'
      }
    }
  }
}

includeShadowJar(project(':dd-java-agent:agent-bootstrap'), 'agent-bootstrap.jar.zip')
includeShadowJar(project(':dd-java-agent:instrumentation'), 'agent-tooling-and-instrumentation.jar.zip')
includeShadowJar(project(':dd-java-agent:agent-jmxfetch'), 'agent-jmxfetch.jar.zip')

jar {
  classifier = 'unbundled'

  manifest {
    attributes(
      "Main-Class": "datadog.trace.agent.TracingAgent",
      "Agent-Class": "datadog.trace.agent.TracingAgent",
      "Premain-Class": "datadog.trace.agent.TracingAgent",
      "Can-Redefine-Classes": true,
      "Can-Retransform-Classes": true,
    )
  }
}

shadowJar {
  classifier null
  archiveName "signalfx-tracing.jar"

  mergeServiceFiles()

  dependencies {
    exclude(dependency("org.projectlombok:lombok:$versions.lombok"))
  }
}

dependencies {
  testCompile project(':dd-trace-api')
  testCompile project(':dd-trace-ot')
  testCompile project(':utils:gc-utils')

  testCompile deps.opentracingMock
  testCompile deps.testLogging
  testCompile deps.guava
  testCompile group: 'org.assertj', name: 'assertj-core', version: '2.9.+'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.19.0'

  testCompile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.2'
  testCompile group: 'org.mongodb', name: 'mongodb-driver-async', version: '3.4.2'
  // run embeded mongodb for integration testing
  testCompile group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '1.50.5'

  testCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3'
  testCompile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.6.0'
}

tasks.withType(Test).configureEach {
  jvmArgs "-Ddd.writer.type=LogWriter", "-Ddd.service.name=java-app"
  jvmArgs "-Dsignalfx.slf4j.simpleLogger.defaultLogLevel=debug"
  jvmArgs "-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"

  doFirst {
    // Defining here to allow jacoco to be first on the command line.
    jvmArgs "-javaagent:${shadowJar.archivePath}"
  }

  testLogging {
    events "started"
  }

  if (project.hasProperty("disableShadowRelocate") && disableShadowRelocate) {
    exclude 'datadog/trace/agent/integration/classloading/ShadowPackageRenamingTest.class'
  }

  dependsOn shadowJar
}
